<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
    <persistence-unit name="hello">
<!--        JPA를 사용할 때 사용할 이름 >>보통 데이터베이스 하나를 만든다.-->
        <properties>
            <!-- 필수 속성 데이터베이스 접근 정보-->
            <property name="jakarta.persistence.jdbc.driver" value="org.h2.Driver"/>
<!--            jpa를 사용할때 사용할 DB드라이버가 필요 -->
            <property name="jakarta.persistence.jdbc.user" value="sa"/>
            <property name="jakarta.persistence.jdbc.password" value=""/>
<!--DB계정 사용자 아이디와 패스워드가 필요-->
            <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:tcp://localhost/~/test"/>
<!--            H2DB는 JDBC URL이라는 것이 존재하기 때문에 그 값을 value에 넣으면 된다.-->
            <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
<!--            Dialect는 데이터베이스 방언이라 하는데 jpa는 특정 데이터베이스에 종속적이지 않도록
                설계되어 있다. 쉽게 말해서 DB가바뀌어도 설정 상관 없이 바뀌어야 된다.
                JPA는 각각의 DB에 표준적이지 않는 것은 방언이라 표현하고
                가변문자나 문자열을 자르는 함수나 페이징 해주는 함수들에 대해서
                JPA방언이라 하고 위 설정이 있으면 Dialect가 알아서 번역을 해서 사용해준다.
                각 언어의 다이아렉트를 사용해주면 jpa가 잘 처리해준다.
                -->
<!--            자카르타와 하이버네이트로 시작하는 서로 다른 패키지인데
                자카르타는 다른 jpa구현 라이브러리를 써도 그대로 적용이 되지만
                하이버네이트에서만 쓸 수 있다. 다른 라이브러리에서는 사용할 수 없다.-->

            <!-- 옵션 -->
            <!-- SQL 쿼리를 콘솔에 출력하여 디버깅에 도움을 줍니다 -->
            <property name="hibernate.show_sql" value="true"/>
            <!-- SQL 쿼리를 더 읽기 쉽게 포맷하여 출력합니다 (들여쓰기, 줄 바꿈 등) -->
            <property name="hibernate.format_sql" value="true"/>
            <!-- SQL 쿼리와 함께 설명(comments)을 추가하여 출력합니다. 쿼리가 어떤 엔터티 또는 작업과 관련된 것인지 명확히 하는 데 도움이 됩니다 -->
            <property name="hibernate.use_sql_comments" value="true"/>
            <!--
                Hibernate가 애플리케이션 실행 시 스키마를 어떻게 처리할지를 지정합니다.
                'create' 옵션은 애플리케이션 시작 시 기존 테이블을 모두 삭제한 후 새로 생성합니다.
                주의: 이 설정은 데이터베이스의 모든 데이터를 삭제하므로, 개발이나 테스트 환경에서만 사용해야 합니다.
            -->
            <property name="hibernate.hbm2ddl.auto" value="create"/>
<!--            <property name="hibernate.hbm2ddl.auto" value="update"/>-->
<!--            스키마 자동 생성에 대한 속성에는
                create : 기존 테이블을 삭제 후 다시 생성 (Drop+create)
                create-drop :test케이스같은 것들을 확인 후 테이블을 날릴 때
                             create와 같으나 종료시점에 테이블 Drop
                update :변경된 부분만 반영(운영DB에서는 사용하면 안된다.)
                        >>변경된 부분은 alter테이블을 주로 사용됨 지우는 것은 안된다.
                        >>추가하는 것만 가능
                validate : 엔티티와 테이블이 정상 매핑되었는지만 확인
                           컬럼 추가 시 컬럼에 그 데이터가 없다고 에러가 나오게 된다.
                           정상 매핑 확인 시 사용
                none : 사용하지 않음
                       사실 none은 없다>>그냥 관례상 none으로 사용 매칭되지 않는 값을
                       넣어도 사실 동작함
                -->
<!--            주의점:
                운영 장비에는 create/create-drop/update를 사용하면 안된다.
                개발 초기 단계는 create/update
                테스트 서버는 update/validate
                스테이징과 운영서버는 validate 또는 none
                테스트 서버나 개발서버도 가급적 안쓰는 게 좋다.
                그냥 벨리데이트나 none으로 사용하지 않는 게 좋다.
                왜냐하면 개발 서버 같은 경우 업데이트가 편리하긴한데
                결국 운영 같은 경우 몇천만건 있는 상태에서 alter가 잘못되거나 그러면
                시스템 다운이 될 수도 있다.
                그래서 테스트나 개발서버는 그냥 본인이 직접 alter를 통해 직접 스크립트를
                짜서 적용하고 이후 검수 후 DB에 적용하는 것이 좋다.
                스크립트를 만들어주기 때문에 운영 서버에 반영할 때도 jpa스크립트를 다듬어서
                DB에 직접 쿼리로 만든다.
                그리고 alter 쿼리가 update설정을 통해 잘못 날라가면 그 테이블이 락이 걸려서
                그 테이블 조회가 안되어 서비스가 중단되는 사태도 일어난다.
                가장 중요한 것은 웹 어플리케이션 계정은 얼터나 드랍 자체를 못하도록
                계정 분할이 필요하다.
                이다음 DDL 생성 기능
                DDL 생성 기능 :
                 1.제약 조건 추가 : 회원이름 필 수 ,10자 초과x
                 @Column(nullable= false,length=10)
                 유니크 제약 조건 추가
                 @Table(uniqueConstraints={@UniqueConstraint(name="NAME_AGE_UNIQUE",
                                          columnNames={NAME","AGE"})})
                 DDL생성 기능은 DDL을 자동 생성할 때만 사용되고 JPA실행 로직에는 영향을
                 주지 않는다.
                -->
        </properties>
    </persistence-unit>

</persistence>
